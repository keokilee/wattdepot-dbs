//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.08.17 at 01:54:53 PM HST 
//

package org.wattdepot.resource.user.jaxb;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.wattdepot.resource.property.jaxb.Properties;
import org.wattdepot.resource.property.jaxb.Property;
import org.wattdepot.server.Server;

/**
 * <p>
 * Java class for anonymous complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{}Email"/>
 *         &lt;element ref="{}Password"/>
 *         &lt;element ref="{}Admin" minOccurs="0"/>
 *         &lt;element ref="{}Properties" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = { "email", "password", "admin", "properties" })
@XmlRootElement(name = "User")
public class User implements Serializable {

  private final static long serialVersionUID = 12343L;
  @XmlElement(name = "Email", required = true)
  protected String email;
  @XmlElement(name = "Password", required = true)
  protected String password;
  @XmlElement(name = "Admin")
  protected Boolean admin;
  @XmlElement(name = "Properties")
  protected Properties properties;

  /**
   * Default no-argument constructor, apparently needed by JAXB. Don't use this, use the one with
   * all the parameters.
   */
  public User() {
    // Apparently needed by JAXB
  }

  /**
   * Returns a new User object with the provided parameters. Needs to be kept up to date with any
   * changes to the User schema, which is bogus.
   * 
   * @param username The username for the User.
   * @param password The password for the User.
   * @param adminp Whether the User is an administrator.
   * @param props The properties for the User.
   */
  public User(String username, String password, boolean adminp, Properties props) {
    this.email = username;
    this.password = password;
    this.admin = adminp;
    this.properties = props;
  }

  /**
   * Gets the value of the email property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getEmail() {
    return email;
  }

  /**
   * Sets the value of the email property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setEmail(String value) {
    this.email = value;
  }

  public boolean isSetEmail() {
    return (this.email != null);
  }

  /**
   * Gets the value of the password property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getPassword() {
    return password;
  }

  /**
   * Sets the value of the password property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setPassword(String value) {
    this.password = value;
  }

  public boolean isSetPassword() {
    return (this.password != null);
  }

  /**
   * Gets the value of the admin property.
   * 
   * @return possible object is {@link Boolean }
   * 
   */
  public Boolean isAdmin() {
    return admin;
  }

  /**
   * Sets the value of the admin property.
   * 
   * @param value allowed object is {@link Boolean }
   * 
   */
  public void setAdmin(Boolean value) {
    this.admin = value;
  }

  public boolean isSetAdmin() {
    return (this.admin != null);
  }

  /**
   * Gets the value of the properties property.
   * 
   * @return possible object is {@link Properties }
   * 
   */
  public Properties getProperties() {
    return properties;
  }

  /**
   * Sets the value of the properties property.
   * 
   * @param value allowed object is {@link Properties }
   * 
   */
  public void setProperties(Properties value) {
    this.properties = value;
  }

  public boolean isSetProperties() {
    return (this.properties != null);
  }

  /*
   * (non-Javadoc)
   * 
   * @see java.lang.Object#hashCode()
   */
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((admin == null) ? 0 : admin.hashCode());
    result = prime * result + ((email == null) ? 0 : email.hashCode());
    result = prime * result + ((password == null) ? 0 : password.hashCode());
    result = prime * result + ((properties == null) ? 0 : properties.hashCode());
    return result;
  }

  /*
   * (non-Javadoc)
   * 
   * @see java.lang.Object#equals(java.lang.Object)
   */
  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    User other = (User) obj;
    if (admin == null) {
      if (other.admin != null) {
        return false;
      }
    }
    else if (!admin.equals(other.admin)) {
      return false;
    }
    if (email == null) {
      if (other.email != null) {
        return false;
      }
    }
    else if (!email.equals(other.email)) {
      return false;
    }
    if (password == null) {
      if (other.password != null) {
        return false;
      }
    }
    else if (!password.equals(other.password)) {
      return false;
    }
    if (properties == null) {
      if (other.properties != null) {
        return false;
      }
    }
    else if (!properties.equals(other.properties)) {
      return false;
    }
    return true;
  }

  /* (non-Javadoc)
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    return "User [admin=" + admin + ", email=" + email + ", password=" + password + ", properties="
        + properties + "]";
  }

  /**
   * A convenience method to add a Property to the List of Property stored in the Properties field.
   * 
   * @param prop The Property to add.
   */
  public void addProperty(Property prop) {
    if (this.properties == null) {
      this.properties = new Properties();
    }
    this.properties.getProperty().add(prop);
  }

  /**
   * Returns the value of the Property with the given key as a double. If the key is not found, it
   * returns 0. Only the first property with the given key is returned. This is a convenience method
   * that calls the underlying Properties method.
   * 
   * @param key The key.
   * @return The key's value as a double.
   */
  public double getPropertyAsDouble(String key) {
    return this.properties.getPropertyAsDouble(key);
  }

  /**
   * Returns the value of the Property with the given key as a String. If the key is not found, it
   * returns null. Only the first property with the given key is returned. This is a convenience
   * method that calls the underlying Properties method.
   * 
   * @param key The key.
   * @return The key's value as a double.
   */
  public String getProperty(String key) {
    return this.properties.getProperty(key);
  }

  /**
   * Given the URI for a WattDepot server, returns the URI to this User resource on that server.
   *  
   * @param serverUri The URI of the server this user belongs to.
   * @return The URI to the User resource corresponding to the given User.
   */
  public String toUri(String serverUri) {
    return serverUri + Server.USERS_URI + "/" + this.getEmail();
  }

  /**
   * Given the Server a User object belongs to, returns the URI to that User resource.
   *  
   * @param server The Server user belongs to.
   * @return The URI to the User resource corresponding to the given User.
   */
  public String toUri(Server server) {
    return toUri(server.getHostName());
  }

  /**
   * Takes the URI to a User resource on an arbitrary WattDepot server, and turns it into a URI for
   * that user on the provided server. This is useful when reading a Source resource from a file,
   * where the stored URI might point to an owner resource that is on a different server.
   *  
   * @param uri The URI that is to be updated.
   * @param server The current server instance.
   * @return A URI String for the given user on the given server.
   */
  public static String updateUri(String uri, Server server) {
    // Grab out the username at the end of the URI
    String username = uri.substring(uri.lastIndexOf('/') + 1);
    return userToUri(username, server);
  }

  /**
   * Given a username and the Server it belongs to, returns the URI to that User resource.
   *  
   * @param username The name of the User object under consideration.
   * @param server The Server user belongs to.
   * @return The URI to the User resource corresponding to the given User.
   */
  public static String userToUri(String username, Server server) {
    return server.getHostName() + Server.USERS_URI + "/" + username;
  }
}
