package org.wattdepot.resource.source;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import javax.xml.datatype.XMLGregorianCalendar;
import org.junit.Test;
import org.wattdepot.resource.property.jaxb.Properties;
import org.wattdepot.resource.property.jaxb.Property;
import org.wattdepot.resource.source.jaxb.Source;
import org.wattdepot.resource.source.jaxb.SourceRef;
import org.wattdepot.resource.source.jaxb.SubSources;
import org.wattdepot.resource.source.summary.jaxb.SourceSummary;
import org.wattdepot.util.tstamp.Tstamp;

/**
 * Ensures that the equals() and hashCode() methods that have been manually added to the JAXB
 * autogenerated code are working. This is important, because if the schema files are changed and
 * new Java code is generated via XJC, then the manually added methods will be silently blown away.
 * These tests act as a backstop to ensure that if that happens, tests will fail.
 * 
 * If we eventually move to autogenerated equals() and hashCode() via XJC plugins, then these tests
 * will confirm that the plugins are working properly.
 * 
 * @author Robert Brewer
 */
public class TestSourceJaxb {

  private static final String DEFAULT_NAME = "foo-source";

  /**
   * Tests equals and hashCode for the Source type.
   */
  @Test
  public void testSource() {
    String key1 = "some-key", value1 = "some-value", key2 = "foo-key", value2 = "foo-value";
    // Make two pairs of Property objects that have same keys &values
    Property prop1 = new Property(key1, value1);
    Property prop2 = new Property(key2, value2);
    Property prop3 = new Property(key1, value1);
    Property prop4 = new Property(key2, value2);
    Properties props1 = new Properties(), props2 = new Properties();
    SubSources subSources1 = new SubSources(), subSources2 = new SubSources();
    Source source1, source2;

    props1.getProperty().add(prop1);
    props1.getProperty().add(prop2);
    props2.getProperty().add(prop3);
    props2.getProperty().add(prop4);
    String sub1 = "http://localhost:8183/wattdepot/sources/sub1";
    String sub2 = "http://localhost:8183/wattdepot/sources/sub2";
    subSources1.getHref().add(sub1);
    subSources1.getHref().add(sub2);
    subSources2.getHref().add(sub1);
    subSources2.getHref().add(sub2);

    String sourceName = DEFAULT_NAME;
    String owner = "http://localhost:8183/wattdepot/users/foo@example.com";
    boolean publicp = true, virtualp = true;
    String coordinates = "0, 0, 0";
    String location = "Some dank corner of a closet";
    String description = "The fabulous foo meter";
    source1 =
        new Source(sourceName, owner, publicp, virtualp, coordinates, location, description,
            props1, subSources1);
    source2 =
        new Source(sourceName, owner, publicp, virtualp, coordinates, location, description,
            props2, subSources2);

    assertNotSame("Two newly created Sources are the same object", source1, source2);
    assertEquals("Two Source objects with identical fields are not equal", source1, source2);
    assertEquals("Two Source objects with identical fields have different hashCodes", source1
        .hashCode(), source2.hashCode());
    subSources2.getHref().remove(1);
    source2 =
        new Source(sourceName, owner, publicp, virtualp, coordinates, location, description,
            props2, subSources2);
    assertFalse("Two different Source objects are equal", source1.equals(source2));
    assertNotSame("Two different Source objects have same hashcode", source1.hashCode(), source2
        .hashCode());
  }

  /**
   * Tests toString for the Source type.
   */
  @Test
  public void testSourceToString() {
    String key1 = "foo-key", value1 = "foo", key2 = "bar-key", value2 = "bar";
    Property prop1 = new Property(key1, value1);
    Property prop2 = new Property(key2, value2);
    Properties props1 = new Properties();
    SubSources subSources1 = new SubSources();
    Source source1;
    String expectedOutput =
        "Source [name=foo-source, public=true, coordinates=(0, 0, 0),"
            + " description=The fabulous foo meter, location=Some dank corner of a closet,"
            + " owner=http://localhost:8183/wattdepot/users/foo@example.com,"
            + " properties=[Property [key=foo-key, value=foo], Property [key=bar-key, value=bar]],"
            + " subSources=[http://localhost:8183/wattdepot/sources/sub1, http://localhost:8183/wattdepot/sources/sub2], virtual=true]";

    props1.getProperty().add(prop1);
    props1.getProperty().add(prop2);
    String sub1 = "http://localhost:8183/wattdepot/sources/sub1";
    String sub2 = "http://localhost:8183/wattdepot/sources/sub2";
    subSources1.getHref().add(sub1);
    subSources1.getHref().add(sub2);
    String sourceName = DEFAULT_NAME;
    String owner = "http://localhost:8183/wattdepot/users/foo@example.com";
    boolean publicp = true, virtualp = true;
    String coordinates = "0, 0, 0";
    String location = "Some dank corner of a closet";
    String description = "The fabulous foo meter";

    source1 =
        new Source(sourceName, owner, publicp, virtualp, coordinates, location, description,
            props1, subSources1);
    assertEquals("Source did not create expected toString", expectedOutput, source1.toString());
  }

  /**
   * Tests equals and hashCode for the SourceSummary type.
   * 
   * @throws Exception If there are problems creating a timestamp.
   */
  @Test
  public void testSourceSummary() throws Exception {
    String sourceUri = "http://localhost:8183/wattdepot/sources/foo";
    XMLGregorianCalendar firstTimestamp = Tstamp.makeTimestamp("2009-07-28T09:00:00.000-10:00");
    XMLGregorianCalendar lastTimestamp = Tstamp.makeTimestamp("2009-08-28T09:00:00.000-10:00");
    long dataCount = 2880L;
    SourceSummary summary1 = new SourceSummary();
    summary1.setHref(sourceUri);
    summary1.setFirstSensorData(firstTimestamp);
    summary1.setLastSensorData(lastTimestamp);
    summary1.setTotalSensorDatas(dataCount);
    SourceSummary summary2 = new SourceSummary();
    summary2.setHref(sourceUri);
    summary2.setFirstSensorData(firstTimestamp);
    summary2.setLastSensorData(lastTimestamp);
    summary2.setTotalSensorDatas(dataCount);

    assertNotSame("Two newly created SourceSummaries are the same object", summary1, summary2);
    assertEquals("Two SourceSummary objects with identical fields are not equal", summary1,
        summary2);
    assertEquals("Two SourceSummary objects with identical fields have different hashCodes",
        summary1.hashCode(), summary2.hashCode());
    summary2.setFirstSensorData(lastTimestamp);
    assertFalse("Different SourceSummaries are equal.", summary1.equals(summary2));
  }

  /**
   * Tests equals and hashCode for the SourceSummary type.
   * 
   * @throws Exception If there are problems creating a timestamp.
   */
  @Test
  public void testSourceSummaryToString() throws Exception {
    String expectedOutput =
        "SourceSummary [href=http://localhost:8183/wattdepot/sources/foo,"
            + " firstSensorData=2009-07-28T09:00:00.000-10:00,"
            + " lastSensorData=2009-08-28T09:00:00.000-10:00," + " totalSensorDatas=2880]";
    String sourceUri = "http://localhost:8183/wattdepot/sources/foo";
    XMLGregorianCalendar firstTimestamp = Tstamp.makeTimestamp("2009-07-28T09:00:00.000-10:00");
    XMLGregorianCalendar lastTimestamp = Tstamp.makeTimestamp("2009-08-28T09:00:00.000-10:00");
    long dataCount = 2880L;
    SourceSummary summary1 = new SourceSummary();
    summary1.setHref(sourceUri);
    summary1.setFirstSensorData(firstTimestamp);
    summary1.setLastSensorData(lastTimestamp);
    summary1.setTotalSensorDatas(dataCount);
    assertEquals("SourceSummary did not create expected toString", expectedOutput, summary1
        .toString());
  }

  /**
   * Tests equals, hashCode, and compareTo for the SourceRef type.
   */
  @Test
  public void testSourceRef() {
    // Create a bunch of components we can use to make various SourceRefs that will compare
    // differently. "Equal" suffix means the same as the original, "Before" means should compare
    // less than, "After" means should compare greater than.
    String sourceName = DEFAULT_NAME;
    String sourceNameEqual = DEFAULT_NAME;
    String sourceNameBefore = "a-foo-source";
    String sourceNameAfter = "z-foo-source";
    String owner = "http://localhost:8183/wattdepot/users/foo@example.com";
    boolean publicp = true, virtualp = true;
    String coordinates = "0, 0, 0";
    String location = "Some dank corner of a closet";
    String description = "The fabulous foo meter";
    String serverUri = "http://localhost:8183/wattdepot/sources/";

    SourceRef ref =
        new SourceRef(sourceName, owner, publicp, virtualp, coordinates, location, description,
            serverUri + sourceName);
    SourceRef refEqual =
        new SourceRef(sourceNameEqual, owner, publicp, virtualp, coordinates, location,
            description, serverUri + sourceNameEqual);
    assertNotSame("Two newly created SourceRefs are the same object", ref, refEqual);
    assertEquals("Two SourceRefs with identical fields are not equal", ref, refEqual);
    assertEquals("Two SourceRefs with identical fields have different hashCodes", ref.hashCode(),
        refEqual.hashCode());
    assertEquals("SourceRef.compareTo timestamp not working", 0, ref.compareTo(refEqual));
    SourceRef refNameBefore =
        new SourceRef(sourceNameBefore, owner, publicp, virtualp, coordinates, location,
            description, serverUri + sourceNameBefore);
    SourceRef refNameAfter =
        new SourceRef(sourceNameAfter, owner, publicp, virtualp, coordinates, location,
            description, serverUri + sourceNameAfter);
    assertTrue("SourceRef.compareTo name not working", ref.compareTo(refNameAfter) < 0);
    assertTrue("SourceRef.compareTo name not working", ref.compareTo(refNameBefore) > 0);
    // Not bothering to test all the other levels of compareTo, since the system should never
    // have two sources with the same name, therefore checking the other fields is moot.
  }
}
