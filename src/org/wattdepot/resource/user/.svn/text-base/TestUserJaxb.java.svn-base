package org.wattdepot.resource.user;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import org.junit.Test;
import org.wattdepot.resource.property.jaxb.Properties;
import org.wattdepot.resource.property.jaxb.Property;
import org.wattdepot.resource.user.jaxb.User;
import org.wattdepot.resource.user.jaxb.UserRef;

/**
 * Ensures that the equals() and hashCode() methods that have been manually added to the JAXB
 * autogenerated code are working. This is important, because if the schema files are changed and
 * new Java code is generated via XJC, then the manually added methods will be silently blown away.
 * These tests act as a backstop to ensure that if that happens, tests will fail.
 * 
 * If we eventually move to autogenerated equals() and hashCode() via XJC plugins, then these tests
 * will confirm that the plugins are working properly.
 * 
 * @author Robert Brewer
 */
public class TestUserJaxb {

  private static final String DEFAULT_USERNAME = "joebogus@example.com";
  private static final String DEFAULT_PASSWORD = "bogus";

  /**
   * Tests equals and hashCode for the User type.
   */
  @Test
  public void testUser() {
    String key1 = "some-key", value1 = "some-value", key2 = "foo-key", value2 = "foo-value";
    // Make two pairs of Property objects that have same keys &values
    Property prop1 = new Property(key1, value1);
    Property prop2 = new Property(key2, value2);
    Property prop3 = new Property(key1, value1);
    Property prop4 = new Property(key2, value2);
    Properties props1 = new Properties(), props2 = new Properties();

    props1.getProperty().add(prop1);
    props1.getProperty().add(prop2);
    props2.getProperty().add(prop3);
    props2.getProperty().add(prop4);

    String username = DEFAULT_USERNAME;
    String password = DEFAULT_PASSWORD;
    boolean adminp = true;
    User user1 = new User(username, password, adminp, props1);
    User user2 = new User(username, password, adminp, props2);

    assertNotSame("Two newly created Users are the same object", user1, user2);
    assertEquals("Two User objects with identical fields are not equal", user1, user2);
    assertEquals("Two User objects with identical fields have different hashCodes", user1
        .hashCode(), user2.hashCode());
    props2.getProperty().remove(1);
    user2 = new User(username, password, adminp, props2);
    assertFalse("Two different User objects are equal", user1.equals(user2));
    assertNotSame("Two different Source objects have same hashcode", user1.hashCode(), user2
        .hashCode());

  }

  /**
   * Tests toString for the User type.
   */
  @Test
  public void testUserToString() {
    String key1 = "foo-key", value1 = "foo", key2 = "bar-key", value2 = "bar";
    Property prop1 = new Property(key1, value1);
    Property prop2 = new Property(key2, value2);
    String username = DEFAULT_USERNAME;
    String password = DEFAULT_PASSWORD;
    boolean adminp = true;
    Properties properties = new Properties();
    properties.getProperty().add(prop1);
    properties.getProperty().add(prop2);
    String expectedOutput =
        "User [admin=" + adminp + ", email=" + username + ", password=" + password
            + ", properties=" + properties + "]";

    User user1 = new User(username, password, adminp, properties);

    assertEquals("Source did not create expected toString", expectedOutput, user1.toString());
  }

  /**
   * Tests equals, hashCode, and compareTo for the UserRef type.
   */
  @Test
  public void testUserRef() {
    // Create a bunch of components we can use to make various SourceRefs that will compare
    // differently. "Equal" suffix means the same as the original, "Before" means should compare
    // less than, "After" means should compare greater than.
    String username = DEFAULT_USERNAME;
    String usernameEqual = DEFAULT_USERNAME;
    String usernameBefore = "a-" + DEFAULT_USERNAME;
    String usernameAfter = "z-" + DEFAULT_USERNAME;
    String serverUri = "http://localhost:8183/wattdepot/sources/";

    UserRef ref = new UserRef(username, serverUri + username);
    UserRef refEqual = new UserRef(usernameEqual, serverUri + username);
    assertNotSame("Two newly created UserRefs are the same object", ref, refEqual);
    assertEquals("Two UserRefs with identical fields are not equal", ref, refEqual);
    assertEquals("Two UserRefs with identical fields have different hashCodes", ref.hashCode(),
        refEqual.hashCode());
    assertEquals("UserRef.compareTo timestamp not working", 0, ref.compareTo(refEqual));
    UserRef refNameBefore = new UserRef(usernameBefore, serverUri + username);
    UserRef refNameAfter = new UserRef(usernameAfter, serverUri + username);
    assertTrue("UserRef.compareTo name not working", ref.compareTo(refNameAfter) < 0);
    assertTrue("UserRef.compareTo name not working", ref.compareTo(refNameBefore) > 0);
    // Not bothering to test all the other levels of compareTo, since the system should never
    // have two sources with the same name, therefore checking the other fields is moot.
  }
}
