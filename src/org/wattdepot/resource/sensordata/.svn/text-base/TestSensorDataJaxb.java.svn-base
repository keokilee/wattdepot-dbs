package org.wattdepot.resource.sensordata;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import javax.xml.datatype.XMLGregorianCalendar;
import org.wattdepot.util.tstamp.Tstamp;
import org.junit.Test;
import org.wattdepot.resource.property.jaxb.Properties;
import org.wattdepot.resource.property.jaxb.Property;
import org.wattdepot.resource.sensordata.jaxb.SensorData;
import org.wattdepot.resource.sensordata.jaxb.SensorDataRef;

/**
 * Ensures that the equals() and hashCode() methods that have been manually added to the JAXB
 * autogenerated code are working. This is important, because if the schema files are changed and
 * new Java code is generated via XJC, then the manually added methods will be silently blown away.
 * These tests act as a backstop to ensure that if that happens, tests will fail.
 * 
 * If we eventually move to autogenerated equals() and hashCode() via XJC plugins, then these tests
 * will confirm that the plugins are working properly.
 * 
 * @author Robert Brewer
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSensorDataJaxb {

  /** Making PMD happy. */
  private static final String JUNIT_TOOL = "JUnit";
  /** Making PMD happy, at the expense of readability. */
  private static final String DEFAULT_TIMESTAMP = "2009-07-28T08:00:00.000-10:00";

  /**
   * Tests equals, hashCode, and compareTo for the SensorData type.
   * 
   * @throws Exception If there are problems creating the timestamp
   */
  @Test
  public void testSensorData() throws Exception {
    String key1 = "some-key", value1 = "some-value", key2 = "foo-key", value2 = "foo-value";
    // Make two pairs of Property objects that have same keys &values
    Property prop1 = new Property(key1, value1);
    Property prop2 = new Property(key2, value2);
    Property prop3 = new Property(key1, value1);
    Property prop4 = new Property(key2, value2);
    Properties props1 = new Properties(), props2 = new Properties();
    SensorData data1, data2, data3;

    props1.getProperty().add(prop1);
    props1.getProperty().add(prop2);
    props2.getProperty().add(prop3);
    props2.getProperty().add(prop4);

    XMLGregorianCalendar timestamp1 = Tstamp.makeTimestamp(DEFAULT_TIMESTAMP);
    XMLGregorianCalendar timestamp2 = Tstamp.makeTimestamp(DEFAULT_TIMESTAMP);
    data1 =
        new SensorData(timestamp1, JUNIT_TOOL,
            "http://localhost:8183/wattdepot/sources/saunders-hall", props1);
    data2 =
        new SensorData(timestamp2, JUNIT_TOOL,
            "http://localhost:8183/wattdepot/sources/saunders-hall", props2);

    assertNotSame("Two newly created SensorData are the same object", data1, data2);
    assertEquals("Two SensorData objects with identical fields are not equal", data1, data2);
    assertEquals("Two SensorData objects with identical fields have different hashCodes", data1
        .hashCode(), data2.hashCode());

    data3 =
        new SensorData(Tstamp.incrementHours(timestamp1, 1), JUNIT_TOOL,
            "http://localhost:8183/wattdepot/sources/saunders-hall", props1);
    assertTrue("SensorData with later timestamp doesn't have positive compareTo", data3
        .compareTo(data2) > 0);
    assertTrue("SensorData with later timestamp doesn't have negative compareTo", data2
        .compareTo(data3) < 0);
    assertEquals("Equal SensorDatas don't have 0 compareTo", 0, data1.compareTo(data2));
  }

  /**
   * Tests toString for the SensorData type.
   * 
   * @throws Exception If there are problems creating the timestamp
   */
  @Test
  public void testToString() throws Exception {
    String key1 = "foo-key", value1 = "foo", key2 = "bar-key", value2 = "bar";
    Property prop1 = new Property(key1, value1);
    Property prop2 = new Property(key2, value2);
    Properties props1 = new Properties();
    SensorData data1;

    props1.getProperty().add(prop1);
    props1.getProperty().add(prop2);

    XMLGregorianCalendar timestamp1 = Tstamp.makeTimestamp(DEFAULT_TIMESTAMP);
    data1 =
        new SensorData(timestamp1, JUNIT_TOOL,
            "http://localhost:8183/wattdepot/sources/saunders-hall", props1);
    assertEquals("SensorData did not create expected toString",
        "SensorData [properties=[Property [key=foo-key, value=foo], Property [key=bar-key,"
            + " value=bar]], source=http://localhost:8183/wattdepot/sources/saunders-hall,"
            + " timestamp=2009-07-28T08:00:00.000-10:00, tool=JUnit]", data1.toString());
  }

  /**
   * Tests that the isInterpolated and setInterpolated methods work properly.
   * 
   * @throws Exception If there are problems creating the timestamp.
   */
  @Test
  public void testInterpolation() throws Exception {
    String key1 = "foo-key", value1 = "foo", key2 = "bar-key", value2 = "bar";
    XMLGregorianCalendar timestamp1 = Tstamp.makeTimestamp(DEFAULT_TIMESTAMP);
    SensorData data =
        new SensorData(timestamp1, JUNIT_TOOL,
            "http://localhost:8183/wattdepot/sources/saunders-hall");
    data.addProperty(new Property(key1, value1));
    data.addProperty(new Property(key2, value2));
    assertFalse("SensorData incorrectly reports interpolation", data.isInterpolated());
    data.setInterpolated(true);
    assertTrue("SensorData incorrectly reports interpolation", data.isInterpolated());
    data.setInterpolated(false);
    assertFalse("SensorData incorrectly reports interpolation", data.isInterpolated());
  }

  /**
   * Tests equals, hashCode, and compareTo for the SensorDataRef type.
   * 
   * @throws Exception If there are problems creating timestamps
   */
  @Test
  public void testSensorDataRef() throws Exception {
    // Create a bunch of components we can use to make various SensorDataRefs that will compare
    // differently. "Equal" suffix means the same as the original, "Before" means should compare
    // less than, "After" means should compare greater than.
    XMLGregorianCalendar timestamp = Tstamp.makeTimestamp(DEFAULT_TIMESTAMP);
    XMLGregorianCalendar timestampEqual = Tstamp.makeTimestamp(DEFAULT_TIMESTAMP);
    XMLGregorianCalendar timestampBefore = Tstamp.makeTimestamp("2009-07-27T08:00:00.000-10:00");
    XMLGregorianCalendar timestampAfter = Tstamp.makeTimestamp("2009-07-29T08:00:00.000-10:00");
    String tool = JUNIT_TOOL;
    String toolEqual = JUNIT_TOOL;
    String toolBefore = "A-JUnit";
    String toolAfter = "Z-JUnit";
    String source = "http://server.wattdepot.org:1234/sources/saunders-hall";
    String sourceEqual = "http://server.wattdepot.org:1234/sources/saunders-hall";
    String sourceBefore = "http://server.wattdepot.org:1234/sources/a-saunders-hall";
    String sourceAfter = "http://server.wattdepot.org:1234/sources/z-saunders-hall";
    SensorDataRef ref = new SensorDataRef(timestamp, tool, source);
    SensorDataRef refEqual = new SensorDataRef(timestampEqual, toolEqual, sourceEqual);
    assertNotSame("Two newly created SensorDataRefs are the same object", ref, refEqual);
    assertEquals("Two SensorDataRefs with identical fields are not equal", ref, refEqual);
    assertEquals("Two SensorDataRefs with identical fields have different hashCodes", ref
        .hashCode(), refEqual.hashCode());
    assertEquals("SensorDataRef.compareTo timestamp not working", 0, ref.compareTo(refEqual));
    SensorDataRef refTimestampBefore = new SensorDataRef(timestampBefore, tool, source);
    SensorDataRef refTimestampAfter = new SensorDataRef(timestampAfter, tool, source);
    assertEquals("SensorDataRef.compareTo timestamp not working", -1, ref
        .compareTo(refTimestampAfter));
    assertEquals("SensorDataRef.compareTo timestamp not working", 1, ref
        .compareTo(refTimestampBefore));
    SensorDataRef refToolBefore = new SensorDataRef(timestamp, toolBefore, source);
    SensorDataRef refToolAfter = new SensorDataRef(timestamp, toolAfter, source);
    assertTrue("SensorDataRef.compareTo tool not working", ref.compareTo(refToolAfter) < 0);
    assertTrue("SensorDataRef.compareTo tool not working", ref.compareTo(refToolBefore) > 0);
    SensorDataRef refSourceBefore = new SensorDataRef(timestamp, tool, sourceBefore);
    SensorDataRef refSourceAfter = new SensorDataRef(timestamp, tool, sourceAfter);
    assertTrue("SensorDataRef.compareTo source not working", ref.compareTo(refSourceAfter) < 0);
    assertTrue("SensorDataRef.compareTo source not working", ref.compareTo(refSourceBefore) > 0);
  }
}
